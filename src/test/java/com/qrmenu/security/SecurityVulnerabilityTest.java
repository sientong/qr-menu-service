package com.qrmenu.security;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
class SecurityVulnerabilityTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    void shouldPreventSqlInjection() throws Exception {
        mockMvc.perform(get("/api/v1/users")
                .param("email", "' OR '1'='1"))
                .andExpect(status().isUnauthorized());
    }

    @Test
    void shouldPreventXssAttack() throws Exception {
        String xssPayload = "<script>alert('xss')</script>";
        
        mockMvc.perform(post("/api/v1/auth/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"name\":\"" + xssPayload + "\",\"email\":\"test@example.com\"}"))
                .andExpect(status().isBadRequest());
    }

    @Test
    void shouldPreventPathTraversal() throws Exception {
        mockMvc.perform(get("/api/v1/files/../../../etc/passwd"))
                .andExpect(status().isBadRequest());
    }

    @Test
    void shouldPreventNoSqlInjection() throws Exception {
        mockMvc.perform(get("/api/v1/users")
                .param("email", "{$ne: null}"))
                .andExpect(status().isUnauthorized());
    }

    @Test
    void shouldPreventRequestHeaderInjection() throws Exception {
        mockMvc.perform(get("/api/v1/test")
                .header("Host", "malicious-site.com")
                .header("X-Forwarded-For", "127.0.0.1\r\nX-Injected: value"))
                .andExpect(status().isBadRequest());
    }
} 